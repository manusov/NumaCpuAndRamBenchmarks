NCRB = NUMA CPU&RAM Benchmarks
bugs fix, optimization, evolution and other required changes list
-------------------------------------------------------------------------------------------


; NEW STEPS FOR DEBUG AND OPTIMIZATION.
;--------------------------------------
; 1) Make tails for memory read/write patterns, granularity approx. 64 bytes.
; 2) Add simple window with one result without drawings, also for debug, and
;    good for product useability also.
; 3) Must pre-check x87 presence if it used for results visualization.
; 4) Select better names for include files and variables.
; 5) How correctly detect FMA512, not as F(FMA256) ?
; 6) Add check context support by XCR0 for AVX512F. Same as for AVX256.
; 7) Add support LARGE PAGES option.
; 8) Add non-temporal mode for x86 64-bit operations, not SSE/AVX only.
; 9) Use local labes at performance patterns.
; 10) FMA test too slow if short operation, fix by right hadd locate.
; 11) Optimizing hadd for FMA512 required yet.
;     Reduce number of registers, victim parallelism.
; 12) Non-temporal write mode not enabled yet if mode=custom block,
;     and block is big, enabled for RAM mode only.
; 13) Old memory allocation method (heap) used for non-NUMA systems,
;     need improve regularity for NUMA and non-NUMA systems.
; 14) Can open >1 simple windows. That good ? But SAME memory region.
; 15) Can set custom block size > allocated size. Failure. or 0. or < granular.
; 16) Fixed size for RAM benchmarks, must be selectable.
; 17) Set affinity for single thread also.
; 18) Function SetThreadAffinityMask duplicated when dynamically loaded.
; 19) Transfer some code to WINDOWSONE directory from WIN0.
; 20) Make single result calculation routine for win0, win1. Yet separate.
;
; 21) FIRST CONNECT ALL (V090), THEN FULL VERIFICATION (V091).
;
;
; STEPS FOR DEBUG AND OPTIMIZATION.
;-----------------------------------
; 1) Must check RCX, R8, R9, R10 when run Default Window Procedure in call back.
; 2) Control region size for text to save coordinate grid lines.
;    Text must be inside boxes?
; 3) First create suspended events at root procedure, close at root procedure,
;    benchmark procedures better functionality - run/wait only.
; 3) For debug, subroutines ExecuteBenchmarkST, ExecuteBenchmarkMT can return
;    RBP*RCX for emulate 1 clock per instruction (CPI=1). Can CPI=0.5 , CPI=2.0
;    and other values.
; 4) Bug if number of NUMA nodes is not a integer power of 2. Fixed ?
; 5) Bug if nodes numbers is not sequental.
; 6) Alignment as +FFF and AND FF..F000, for not modify if already aligned,
;    otherwise unalign 8K+ when align 4K.
;
; STEPS BY OPTIONS AND AUTO-SCALE SUPPORT.
;------------------------------------------
; 1) Select Method by CPU instructions.
; 2) Enable Hyper-Threading (renaming to Enable ODD CPUs ?).
; 3) Enable Multi-Core.
; 4) Enable Multi-Domain.
; 5) Select NUMA option.
; 6) Select analysing object or size (L1,L2,L3,RAM,Custom).
; 7) Slow mode option.
; 8) Auto-select Y-scale, pre-measure speed.  
; 9) Set limits for CPU list.
; 10) Method string background at Window 1. Make InvalidateRect partially. 
;     Other cause, debug and set background color.
; 11) NUMA functions declaration cause error at Windows XP x64, 
;     even if don't call this functions. Required separate modules ?
;     Can load NUMA functions conditionally, by code, for compatible with XP.
; 12) Bug with memory overflow when multithreading memory analysing.
; 13) Visual all options at Window 1 down, yet only method, object, repeats.
; 14) Potentially wrong hyper-threading option when no-NUMA, use windows
;     processor mask instead NUMA mask.
; 15) Hyper-Threading and Multi-Domain options, probably change options names.
;     or change interpretation: HT:03h , MC:0FFFFh , MD: 0FFFFFFFFh,
;     regular interpretation for HT, MC, MD.
;     Alternative: Multi-Thread , Reject HT , Reject remote domains.
; 17) Speed not divided by 2 when disabled HT, it's right, because 2 threads.
; 18) Bug if long time (0.5 hour) no actions, L1 without critical point at
;     Speed=F(Block Size).
; 19) CPI (Clocks Per Instruction) visual bug at Multi-Thread mode.
; 20) Correct text Analyse/Analysing in program, screen-shot and document.
;     By yandex translator, "analyse" is legal.
; 21) Replace stack alignment with conditional jump to without jumps:
;     AND RSP,0FFFFFFFFFFFFFFF0h.
; 22) Some tests at Old MPC. Y-drawings and MBPS as text mismatches, debug
;     precision, this caused by auto Y-sizing?
;     Y-axis approximation error.
; 23) For compatibility with Win XP 64, load NUMA-functions manually, not by
;     fixed table. Otherwise not start with message about NUMA functions
;     absence at KERNEL32.DLL.
; 24)+ Replace MOV REG64,Pointer64 to LEA REG64,Pointer64, this optimal for
;     64-bit mode because LEA use 32-bit RIP-relative offset instead
;     full 64-bit address.
; 25)+ Replace horizontal addition in the matrixes samples to optimal from
;     library.
; 26) X-axis approximation error, RCX shifted relative pixel draw, some pixels.
; 27) Optimize prepare scenario, Window0.inc lines 400-520.
; 28) Statical memory allocation is non-optimal because for all cases,
;     better: allocate - run operation - release, but can't make this
;     inside window callback routine.   
;
; STEPS BY MATHEMATICS OPERATIONS SUPPORT.
; THIS REMOVED AT VERSION 0.9x , SEE 0.8x FOR THIS FRAGMENTS.
;-------------------------------------------------------------
;
; If BPI=Special Value then Math Mode = ON, make replacements:
; 1)+ X-axis name replace from " Bytes/KB/MB " to " Units ".  
; 2)+ Y-axis name replaxe from " MBPS " to " MFLOPS ".
; 3)+ X-axis grid values replace to Units count.
; 4)+ Y-axis grid values replace to GigaFlops count.
; 5)+ At right up corner visual GigaFlops instead MBPS.
; 6)+ Target routine must separately return Clks. Per Instr. (CPI) and GigaFlops
;    or return clocks per instruction and calculate GigaFlops.
; Future: use separate screens for Cache&RAM and Mathematics benchmarks.
; For better precision return delta-TSC from pattern, don't measure by caller.
; Now can return RAX = Clocks per instruction = CPI , * Number of repeats
; CPI * 4 * Fclk = GFLOPS, *4 because AVX register = 4 numbers.
; Save RAX for all cases at Threads Control Block offset = 72,
; If single-thread mode return at first entry.
; but extract it only for math. mode. Use caller-measured dTSC for
; Cache&RAM mode.
; (!) But bug for multi-threads: parallelism don't care for per-thread result.
; Required use full execution time. Procedure must return number of operations.
;
; 7) Make unified model for Cache&RAM and Mathematics modes.
; 8) Debug sample must allocate >1GB for big matrixes.   

